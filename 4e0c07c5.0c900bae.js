(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{112:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),o=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),p=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=p(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=p(n),d=r,m=b["".concat(a,".").concat(d)]||b[d]||u[d]||i;return n?o.a.createElement(m,s(s({ref:t},c),{},{components:n})):o.a.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},84:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(3),o=n(7),i=(n(0),n(112)),a={id:"options",title:"Options"},s={unversionedId:"getting-started/options",id:"getting-started/options",isDocsHomePage:!1,title:"Options",description:"jest-preset-angular uses ts-jest options under the hood, which are located under the globals of Jest config object",source:"@site/docs/getting-started/options.md",slug:"/getting-started/options",permalink:"/jest-preset-angular/docs/next/getting-started/options",editUrl:"https://github.com/thymikee/jest-preset-angular/edit/master/website/docs/getting-started/options.md",version:"current",sidebar:"docs",previous:{title:"Presets",permalink:"/jest-preset-angular/docs/next/getting-started/presets"},next:{title:"Test environment",permalink:"/jest-preset-angular/docs/next/getting-started/test-environment"}},l=[{value:"Exposed configuration",id:"exposed-configuration",children:[]},{value:"Brief explanation of config",id:"brief-explanation-of-config",children:[]}],c={toc:l};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"jest-preset-angular")," uses ",Object(i.b)("inlineCode",{parentName:"p"},"ts-jest")," options under the hood, which are located under the ",Object(i.b)("inlineCode",{parentName:"p"},"globals")," of Jest config object\nin the ",Object(i.b)("inlineCode",{parentName:"p"},"package.json")," file of your project, or through a ",Object(i.b)("inlineCode",{parentName:"p"},"jest.config.js"),", or ",Object(i.b)("inlineCode",{parentName:"p"},"jest.config.ts")," file."),Object(i.b)("p",null,"More information about ",Object(i.b)("inlineCode",{parentName:"p"},"ts-jest")," options, see ",Object(i.b)("a",{parentName:"p",href:"https://kulshekhar.github.io/ts-jest/docs/next/getting-started/options"},"https://kulshekhar.github.io/ts-jest/docs/next/getting-started/options")),Object(i.b)("h3",{id:"exposed-configuration"},"Exposed configuration"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const snapshotSerializers = require('../build/serializers');\n\nmodule.exports = {\n  globals: {\n    'ts-jest': {\n      tsconfig: '<rootDir>/tsconfig.spec.json',\n      stringifyContentPathRegex: '\\\\.html$',\n    },\n  },\n  testEnvironment: 'jsdom',\n  transform: {\n    '^.+\\\\.(ts|js|html)$': 'jest-preset-angular',\n  },\n  moduleFileExtensions: ['ts', 'html', 'js', 'json'],\n  snapshotSerializers,\n};\n")),Object(i.b)("div",{className:"admonition admonition-important alert alert--info"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"Jest runs with ",Object(i.b)("inlineCode",{parentName:"p"},"jest-preset-angular")," neither in browser nor through dev server. It uses ",Object(i.b)("inlineCode",{parentName:"p"},"JSDOM")," to abstract browser environment hence we depend on\n",Object(i.b)("inlineCode",{parentName:"p"},"JSDOM")," implementation for real browser features."))),Object(i.b)("h3",{id:"brief-explanation-of-config"},"Brief explanation of config"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"we're using some ",Object(i.b)("inlineCode",{parentName:"li"},'"globals"')," to pass information about where our tsconfig.json file is that we'd like to be able to transform HTML files through ",Object(i.b)("inlineCode",{parentName:"li"},"ts-jest"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"transform"')," \u2013 run every TS, JS, or HTML file through so called ",Object(i.b)("em",{parentName:"li"},"Jest transformer"),"; this lets Jest understand non-JS syntax."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"testEnvironment"')," \u2013 the test environment to run on."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"moduleFileExtensions"')," \u2013 our modules are TypeScript and JavaScript files."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"moduleNameMapper"')," \u2013 if you're using absolute imports here's how to tell Jest where to look for them; uses regex."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"snapshotSerializers"')," - array of serializers which will be applied to snapshot the code. Note: by default angular adds\nsome angular-specific attributes to the code (like ",Object(i.b)("inlineCode",{parentName:"li"},"ng-reflect-*"),", ",Object(i.b)("inlineCode",{parentName:"li"},'ng-version="*"'),", ",Object(i.b)("inlineCode",{parentName:"li"},"_ngcontent-c*")," etc).\nThis package provides serializer to remove such attributes. This makes snapshots cleaner and more human-readable.\nTo remove such specific attributes use ",Object(i.b)("inlineCode",{parentName:"li"},"no-ng-attributes")," serializer. You need to add ",Object(i.b)("inlineCode",{parentName:"li"},"no-ng-attributes")," serializer manually.")))}p.isMDXComponent=!0}}]);